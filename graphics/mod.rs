struct RGB {
    r: u8,
    g: u8,
    b: u8,
}

pub fn paint_element(pixelcolors: &mut Vec<u8>, graphic: &Vec<Vec<Option<u8>>>, x_offset: i32, y_offset: i32, max_x: usize, max_y: usize) {
    let graphic_width = graphic[0].len();
    let graphic_height = graphic.len();
    println!("Graphic width: {}, height: {}", graphic_width, graphic_height);

    if x_offset > max_x as i32 || y_offset > max_y as i32 {
        println!("offset check fail positively");
        return //placing the graphic outside of the matrix on the right or top
    }
    if (x_offset + graphic_width as i32) < 0 || (y_offset + graphic_height as i32) < 0 {
        println!("offset check fail negatively");
        return
    }

    let room_for_drawing_x = max_x as i32 - x_offset;
    let room_for_drawing_y = max_y as i32 - y_offset;
    println!("Room for drawing: {} {}", room_for_drawing_x, room_for_drawing_y);

    for (i, row) in graphic.iter().rev().enumerate() { //start rendering at bottom of graphic
        for col in 0.. (graphic_width) { //each x
            let mut serpentine = false;
            if (i as i32+y_offset) % 2 == 1 {
                serpentine = true;
            }

            let mut matrix_x = x_offset + col as i32;
            let matrix_y = y_offset + i as i32;

            if (col+1) > room_for_drawing_x as usize || (i+1) > room_for_drawing_y as usize {
                println!("Skip due to col or i exceeding room on the right or top");
                continue
            }
            if matrix_x < 0 || matrix_y < 0 {
                println!("Skip due to col or i not on the matrix due to offset");
                continue
            }

            if serpentine { // serpentine row
                matrix_x = max_x as i32 - 1 - x_offset - col as i32;
            }

            if row[col] == Some(1) {
                let index_in_color_vec = (matrix_x*3 + (matrix_y*max_x as i32)*3) as usize;
                println!("Draw a freakin pixel at {}", index_in_color_vec);
                pixelcolors[index_in_color_vec] = 255;
                pixelcolors[index_in_color_vec+1] = 255;
                pixelcolors[index_in_color_vec+2] = 255;
            }
        }
    }
    println!("{:?}", pixelcolors);
}


pub fn c() -> Vec<Vec<Option<u8>>> {
vec![
        vec![Some(1),Some(1), Some(1)],
        vec![Some(1), Some(1), Some(1)],
        vec![Some(1), Some(1), Some(1)],
        vec![Some(1), Some(1), Some(1)],
    ]
}


fn one_up() -> Vec<u8> {
    vec![255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,
    255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,254,255,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,254,255,255,255,255,255,254,255,
    255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,254,255,255,255,254,255,255,254,255,255,255,255,255,255,254,255,255,255,255,254,255,
    255,255,254,254,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,254,255,255,255,
    255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,254,255,255,255,255,255,255,254,255,255,
    255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,254,255,255,255,255,255,255,255,254,255,255,255,255,254,255,255,255,255,255,255,254,
    255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,255,255,255,255,255,255,255,255,254,255,255,
    255,254,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,254,255,255,255,255,255,
    255,254,255,254,255,255,254,255,255,255,255,255,205,205,203,5,9,1,2,9,1,2,10,0,0,11,0,0,12,0,1,11,0,255,255,255,255,255,254,255,255,254,255,255,255,201,201,201,
    255,254,255,255,255,255,204,204,204,7,4,15,3,9,1,99,137,4,255,255,251,4,114,0,8,117,3,8,117,0,8,117,2,4,8,1,3,9,4,206,204,205,254,255,254,202,203,202,
    255,254,255,212,213,212,11,11,11,106,139,14,255,253,254,255,255,255,250,253,249,2,182,0,0,185,0,0,182,0,1,183,0,249,249,246,13,122,13,0,15,0,246,255,243,254,254,255,
    255,255,255,206,206,206,240,250,225,253,252,248,255,254,255,33,199,25,2,248,1,214,254,214,216,254,216,214,255,216,209,255,209,14,247,23,6,153,20,237,254,229,2,7,1,254,255,255,
    255,255,255,0,33,0,14,175,19,0,252,4,0,253,5,2,246,8,249,255,251,254,255,255,255,255,255,255,255,255,255,255,255,255,251,255,0,246,0,0,183,2,0,119,1,2,2,2,
    255,254,255,1,23,0,247,255,246,255,255,253,6,246,0,0,248,1,254,251,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,2,247,1,0,184,0,3,121,3,255,255,255,
    254,255,255,0,2,0,254,255,255,255,255,255,255,255,255,0,252,0,254,251,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,253,3,247,2,5,183,1,254,254,252,254,255,255,
    255,255,255,0,1,0,254,255,255,254,255,255,254,255,255,0,184,2,0,184,0,254,255,254,255,255,255,255,255,255,255,255,255,0,184,1,1,185,0,255,255,255,254,255,253,255,255,255,
    255,255,255,0,23,0,241,255,242,254,255,254,5,116,0,0,116,2,0,117,2,1,117,2,0,116,2,0,117,2,0,117,2,0,117,2,0,118,4,255,255,255,254,255,255,255,255,255,
    255,254,255,0,28,0,0,117,2,0,117,2,1,12,0,4,9,2,3,8,1,2,6,0,3,7,0,3,8,1,2,7,0,2,9,0,0,117,2,0,118,0,98,137,0,0,0,0,
    255,254,255,205,205,203,6,11,4,1,7,0,255,254,253,254,255,255,3,8,1,255,254,255,255,254,254,3,8,0,255,255,255,255,254,255,4,9,2,3,9,1,6,8,3,255,255,255,
    255,255,254,254,255,255,0,1,0,255,255,253,254,255,255,255,255,254,10,15,9,254,255,255,255,255,254,10,15,11,255,254,255,255,255,255,251,253,250,3,7,0,255,255,255,254,255,255,
    255,255,254,255,255,255,205,205,205,2,26,0,4,88,2,252,255,251,255,255,255,255,254,254,255,255,254,255,255,255,255,255,255,1,89,2,0,20,0,237,242,238,202,202,202,255,255,255,
    255,255,255,254,255,254,205,205,204,204,204,204,0,4,0,7,12,6,10,13,6,10,13,6,10,13,6,11,13,6,10,13,6,0,4,0,205,204,204,204,204,204,255,254,255,255,255,255,
    255,254,255,255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,254,255,255,255,
    255,255,255,254,255,254,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,254,254,255,255,255,255,254,255,255,255,255,255,255,254,255,255,255,254,255,254,255,255,255,255,254,255,255,
    255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,254,255,254,255,254,255,255,255,255,254,255,255,255,255,255,255,255,254,255,
    254,254,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,254,254,255,255,254,255,255,254,255,255,255,255,254,255,255,255,255,254,255,255,255,255,255,255,255,254,254,255,255,255,
    255,255,255,255,254,254,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,254,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,254,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,255,254,255,
    254,255,255,254,255,255,255,254,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,254,255,254,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,254,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,
    255,255,255,255,255,255,254,255,255,255,255,254,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,255,255,254,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255
    ]
}